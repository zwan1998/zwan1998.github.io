[{"authors":["admin"],"categories":null,"content":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/zhi-wang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/zhi-wang/","section":"authors","summary":"Nelson Bighetti is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"Zhi Wang","type":"authors"},{"authors":null,"categories":null,"content":"Controlling the mouse from python  In programming, (0,0) is the top left corner, Y-coordinates \u0026lsquo;increases\u0026rsquo; going down, X-coordinates \u0026lsquo;increases\u0026rsquo; going right.  import pyautogui pyautogui.size() # resolution of current screen, returns a 2-tuple (width,height) pyautogui.position() # returns the current position of mouse pyautogui.moveTo(width,height) # move mouse to (width,height) pyautogui.moveTo(width,height,duration = 1.5) # move mouse to (width,height), and move the mouse gradually, taking total 1.5s. pyautogui.moveRel(delta_width,delta_height) # move relatively. pyautogui.click(width,height) # click the mouse, ingore width and height may click the current pos.   Other useful methods: pyautogui.dragTo(), pyautogui.dragRel(), pyautogui.doubleclick(), pyautogui.rightclick() pyautogui module have a safeguard, if may raise an exception when the mouse ia at (0,0) coordinates. pyautogui.displayMousePosition() display the mouse position. (only at terminal).   Documentation at pyautogui.readthedocs.org\n Controlling the keyboard from python pyautogui.typewrite('str', interval = 0.2) # type str like a keyboard input, interval is the duration between two character.   \u0026lsquo;str\u0026rsquo; could be replaced by a list of string, each string is a key in keyboard, pyautogui.KEYBOARD_KEY displays all supported keyboard keys. pyautogui.hotkey('ctrl','o') can be used for keyboard shorycuts.  Screenshots and image recognition  pyautogui.screenshot() take a screenshot and returns a PIL image object. , we can save it to a file by passing and argument (\u0026lsquo;file path\u0026rsquo;) to it. pyautogui.locateOnScreen('image_path') find where the image appearing on screen, it will returns a 4-tuple: \u0026lsquo;(start_width, start_height, delta_width, delta_height)', pyautogui.locateCenterOnScreen('image_path') returns the center pixel.  Very computation expensive pixel perfect return None if not found.    ","date":1594252800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594252800,"objectID":"81b769d003ce5272672440a8027df955","permalink":"/post/python/python7/","publishdate":"2020-07-09T00:00:00Z","relpermalink":"/post/python/python7/","section":"post","summary":"Controlling the mouse from python  In programming, (0,0) is the top left corner, Y-coordinates \u0026lsquo;increases\u0026rsquo; going down, X-coordinates \u0026lsquo;increases\u0026rsquo; going right.  import pyautogui pyautogui.size() # resolution of current screen, returns a 2-tuple (width,height) pyautogui.","tags":null,"title":"python07 GUI Automation","type":"post"},{"authors":null,"categories":null,"content":"Exception raise  User-defined exceptions.  raise Exception('This is the error message.')   Get the exception message: traceback.format_exc() function.  import traceback try: #try code except: print(traceback.format_exc())  Assertions and assert statement  If assertion statement fails, AssertionError exception raises. Assert statement has syntax assert statement, 'Error Messgae'  assert a \u0026gt; 0, 'input is less than or equal to 0'  Degug tool:Logging  Logging module need to be set at begining of a program using logging.debug('Error Message') to \u0026ldquo;print\u0026rdquo; a debug message. (See \u0026lsquo;factorial.py\u0026rsquo; as example) Why use logging.debug(), but not print()  We can turn off all such debug messages by puttting logging.disable(logging.CRITICAL) at top of a program. logging module has 5 level of messages logging.debug(), logging.info(), logging.warning(), logging.error(), logging.critial() (from lowest to highest level). We can turn off them separately (turn off all level below the specific level)    import logging logging.basicConfig(level = logging.DEBUG, format = '%(asctime)s - %(levelname)s - %(message)s') # Need to be set up before using. logging.debug('Error Message')   logging can write to a file: add filename = 'fileName argument to logging.basicConfig().  ","date":1594080000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594080000,"objectID":"ce29503faba087c439d9fa9da83de94e","permalink":"/post/python/python4/","publishdate":"2020-07-07T00:00:00Z","relpermalink":"/post/python/python4/","section":"post","summary":"Exception raise  User-defined exceptions.  raise Exception('This is the error message.')   Get the exception message: traceback.format_exc() function.  import traceback try: #try code except: print(traceback.format_exc())  Assertions and assert statement  If assertion statement fails, AssertionError exception raises.","tags":null,"title":"python04 Debugging","type":"post"},{"authors":null,"categories":null,"content":"Webbrowser  import webbrowser open a web brower  ","date":1594080000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594080000,"objectID":"960b8d1283de66c6fc4c97b2ca6b92a9","permalink":"/post/python/python5/","publishdate":"2020-07-07T00:00:00Z","relpermalink":"/post/python/python5/","section":"post","summary":"Webbrowser  import webbrowser open a web brower  ","tags":null,"title":"python05 Web Scraping","type":"post"},{"authors":null,"categories":null,"content":"Deal with excel files  import openpyxl has functions dealing with excel files. openpyxl.load_workbook('PATH') open an excel file, return an workbook object. workbook.get_sheet_by_name('Sheet1') returns \u0026lsquo;Sheet1\u0026rsquo; in \u0026lsquo;workbook\u0026rsquo;, it returns a sheet object.  workbook.get_sheet_names() returns a list of sheet names.   sheet object  sheet['A1'] returns the value of A1 in a sheet object. It returns a cell object. This is same as sheet.cell(row = 1, column = 1) cell.value: Cells have member named \u0026lsquo;value\u0026rsquo; which is the value of a cell object. It has type same as what it is in excel file. To convert it to a string, using str()   Write to an excel object  openpyxl.Workbook() returns a new workbook object. It has one sheet names \u0026lsquo;Sheet\u0026rsquo;. We can write into a sheet via assignment (i.e. sheet['A1'] = 10) workbook.create_sheet() create a new sheet and return that sheet.  sheet.title = 'Sheet Name changes the name of a sheet.   workbook.save('PATH') saves an workbook to \u0026lsquo;PATH\u0026rsquo;.    Deal with pdf files  import PyPDF2 has functions dealing with pdf files.  import PyPDF2 pdf = open('test.pdf','rb') # be sure to open as binary mode. reader = PyPDF2.PdfFileReader(pdf) # create a PyPDF2Reader object reader.numPages # get number of pages page = reader.getPage(0) # create a page object (page 0 in this case) page.extractText() # returns a string that extract the texts in that 'page'.   PyPDF2 can do some page-level editing on pdfs.  writer = PyPDF2.PdfFileWriter() # create a PyPDF2Writer object writer.addPage(page) # add a page to writer. where 'page' is a page object. # Output a pdf file output = open('output.pdf','wb') # open a new pdf file in write binary mode. writer.write(output) # Write 'writer' into 'output'.  Deal with doc document Deal with emails  Emals sending uses SMTP( Simple Mail Transfer Protocal). Email retriving using IMAP (Internet Message Access Protocal) email content has format \u0026lsquo;Subject: Header \\n\\n Content\u0026rsquo; Note there are two newlines between header and email content. If send successfully, it will renturn empty string.  import smtplib # python use smtplib to handle emails conn = smtplib.SMTP('smtp.gmail.com', 587) # create a connection to gmail. conn.ehlo() # return connection status. First tuple is an integer: (between 200-299 means connection OK). conn.starttls() # Encrpt the password you send. conn.login('username','password') conn.sendmail('sendFrom', 'sendTo', 'email content') conn.quit()   Check email inbox import imapclient and import pyzmail36 enable us check email inbox.  import imapclient conn = imapclient.IMAPClient('imap.gmail.com', ssl = True) # create a connection to gmail. conn.login('username', 'password') conn.select_folder('INBOX', readonly=True) # Select the inbox foler UIDs = conn.search(['SINCE 1-June-2020']) # IMAP has a special search way,  ","date":1594080000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594080000,"objectID":"c7a60389bdaf12850da42984cb6aec33","permalink":"/post/python/python6/","publishdate":"2020-07-07T00:00:00Z","relpermalink":"/post/python/python6/","section":"post","summary":"Deal with excel files  import openpyxl has functions dealing with excel files. openpyxl.load_workbook('PATH') open an excel file, return an workbook object. workbook.get_sheet_by_name('Sheet1') returns \u0026lsquo;Sheet1\u0026rsquo; in \u0026lsquo;workbook\u0026rsquo;, it returns a sheet object.","tags":null,"title":"python06 Excel, Word, and PDF document","type":"post"},{"authors":null,"categories":null,"content":"Basic bash commands  echo prints the argument follows it. echo $PATH$ will print all directories that the terminal can search for a program. which program_name tells where the program we run as we type program_name on terminal. pwd: print working directory File system: . means current directory; .. means parent directory; ~ means home directory; - means go to previous directory. ls command  ls -l prints in long format. A long format begin as drwxr-xr-x. The first d means it is a directory, others are grouped by three (owner, group, anyone else respectively). r refers to reading; w refers to writing; x refers to executing. To change the mode of a file, use chmod command.   mv path1 path2 used for move or rename a file. cp path1 path2 used for copy a file. rm path1 is used to remove a file; rmdir is used to remove a directory; mkdir is used to make a directory. (By default, remove is not recursive, add flag -r to make it recursive). cat path1 prints the content of a file |(pip):means take the output to the left as the input to the right. man cmd command opens mannual of a execuable command cmd.  [] in a mannual means optional commands    echo Hello\\ World # -\u0026gt; Hello World echo $PATH$ which echo echo hello \u0026gt; hello.txt # write hello to hello.txt echo hello \u0026gt;\u0026gt; hello.txt # append hello to hello.txt (keep the origin content of hello) ls -l / | tail -n1 # print the last line of 'ls /'  root user  root user is the super user of a computer. It can do everything on a computer. sudo cmd let you run cmd as a super user. sudo su change your terminal to root\u0026rsquo;s terminal  # Suppose we don't have permission writing to brightness echo 500 \u0026gt; brightness sudo echo 500 \u0026gt; brightness # Still don't work, since pip and redirc combined two command toghther, this line of code is sames as do 'sudo echo 400' and write 500 to brightness. Writing 500 to brightness is not 'sudo' # To fix this problem, we could use 1. 'sudo su' 2. use 'tee' echo 1060 | sudo tee brightness # 'tee' command means writing to a file and print to output as the same time.  ","date":1593820800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593820800,"objectID":"0daab82864c05827162529dc7c95ab5a","permalink":"/post/missing-semester-in-computer-science-/lec01_shell/","publishdate":"2020-07-04T00:00:00Z","relpermalink":"/post/missing-semester-in-computer-science-/lec01_shell/","section":"post","summary":"Basic bash commands  echo prints the argument follows it. echo $PATH$ will print all directories that the terminal can search for a program. which program_name tells where the program we run as we type program_name on terminal.","tags":null,"title":"Lec01: The shell","type":"post"},{"authors":null,"categories":null,"content":" This is just a review of python, Not contain every details.  Expressions  / in python is not an integer dividion (E.g. 25/4 = 6.25). Mutiple an integeri with a string with result a string repeating i times. Python doesn\u0026rsquo;t support ++ operator, but support +=, -=, *=, /=, %= operators. type function, type(obj) will returns the type of object, the object can be a literal.  Assignment  python doest\u0026rsquo;t need to spetify types when doing assignments. Python supports mutiple assignment, the LHS is mutiple variable name, and the RHS is a list (or values separete by comon) Python assignment for mutable values(list,dictionary) are copy by reference, not copy by value.  spam = 3 spam = \u0026quot;hello world\u0026quot; # Mutiple assignment spam= [1,2,3] i1,i2,i3 = spam # Swap two values using mutiple assignment a, b = 'AAA', 'BBB' a , b = b , a  spam = [1,2,3,4,5] cheese = spam cheess[1] = 100 # spam and cheess are both equal to [1,100,3,4,5]  IO operators  print() add a newline at the end. To aviod this, use keyword argument end: print('Hello', end = '').  myName = input() # Wait the user type until the user entering a newline character print(myName) # output function. print('dog','cat','goose') # -\u0026gt; 'dog cat goose' print('dog','cat','goose', sep = 'A') # -\u0026gt; 'dogAcatAgoose'  Control flow Boolean and comparision operator  Boolean in python are True and False Comparision operator are indentical to C++ ==, != , \u0026gt;=, \u0026gt;, \u0026lt;=, \u0026lt; python allow comparision between different types  42 == '42' # allow, but will be evaluated to false 42 == 42.0 # allow, True   Boolean operators is different with C++: and, or, not, which are english words.  if, else, elif # syntax 1. don't forget : 2, no braces, but indention. if (condition): statements1 elif (condition2): statements2 else: statements3   For int: \u0026lsquo;0\u0026rsquo; is false; For float: \u0026lsquo;0.0\u0026rsquo; is false; For string: '\u0026rsquo; is false  while  break and continue are also valid in python.  # syntax while (condition): statements # endof while loop  for  range(a,b,c) has a type range. It means starts at a, end at b, each iteration it increment or decrement c. Like c++, the object follows in should be a sequential object (like list). One useful trick in python is use range(len(list)) follows in.  # sytax for i in range(n): # i = 0,1,2,3,...,n-1 statements # endof for loop  Functions  Every functions has a return value. If not specify, it will return a None type.  def function_name(parameter1,parameter2): statements return val #optional # Calling a function function_name(arg1,arg2)  Scope  Unlike C++, which each block is a scope. Python only has two scopes: golbal scope (outside any function) and local scope(inside a function). python doesn\u0026rsquo;t distinguish declaration and assignment, so in order to use a golbal in a function, must specify it.  def spam(): global eggs # use golal eggs eggs = 'Hello' # change the value of eggs to 'hello' print(eggs) eggs = 42 spam() print(eggs) # -\u0026gt; 'Hello'  try/except  Similar to C++ try/catch. If no object follows except, it will catch all types of errors.  def div42by(divideby): try: return 42/divideby except ZeroDivisionError: print('Error: Your tried to divide by 0')  Lists  A list is a container that contains values  types in a list could not be same. index can be negative: -1 refer to the last element; index returns a single value. slice (e.g. spam[0:2]) return a list of value. If we left the beginning empty (e.g. spam[:2]), it means starts at 0. If we left the end empty (e.g. spam[1:]), it means end at last element. delete an element: use del (del spam[2] means delete the second element) length of a list (len() function) Turn a value to a list: list() function in and not in operator: whether a value in a list.    # Simple list spam = ['cat', 'dog', 'goose'] # spam is a list. spam[0] # subscript access element in a list. -\u0026gt; 'cat' # List of lists spam2 = [ ['cat','dog'], ['goose','elephant'] ] spam2[0] # -\u0026gt; ['cat,'dog'] spam2[1][0] # -\u0026gt; 'goose' # Slices spam[0:2] # refer to the index at 0, up to (does not include) 2 -\u0026gt; ['cat','dog'] # mutate a list spam[1:3] = [1,2,3] # -\u0026gt; spam = ['cat',1,2,3] # list() list('hello') # -\u0026gt; ['h','e','l','l','o'] list(range(0,5)) # -\u0026gt; [0,1,2,3,4]    Python default treate list initialization and assignment as reference.\n All variable has type list is a reference to its initialization.    list methods\n index(): listname.index(value) returns the index of value in listname. If value is not found, it raise an ValueError exception. If duplicate value, it will return the first occurance. append():listname.appand(value) appand value into the end of listname. insert(): listname.insert(i,value) inserts value at the ith index of listname. remove(): listname.remove(value) remove value in listname, if value is not in listname, a ValueError raises. If duplicate value, it will remove the first occurance. sort(): listname.sort() only integeral and string type can be sort. sort() can take arguments, reverse = True sorts in reverse order. key=str.lower do not distinguish lower and upper case.    string can be treated as a list, some functions applies to list also applies to string.\n However, string is immutable. so str[0] = 'a' is invalid. Act like a constant list.    Dictionary  Stores key-value pair key:value pair. Dictionary is mutable. key-value pairs in dictionary are unordered. use in and not in to verify whether a key is in a list. keys(), values() and items() methods returns a list\u0026rsquo;s key, value and item respectively. The return type is dic_key, dic_value, use list() function to convert it to a list. get(): dic.get(key,default_value) returns dic[key] is key is in the list, and return default_value if not.  myCat = {'size':'fat', 'color':'grey', 'weight':20} myCat['size'] #-\u0026gt; 'fat' myCat['weight'] #-\u0026gt; KeyError exception # for loop of a dictionary for value in dic.values(): for key in dic.keys(): for key ,value in dic.items(): #mutate a dic myCat['height'] = 40 # insert 'height':40 into a myCat. If 'height' already excists in myCat, it will mutate the value. myCat.setdefault('height',100) # Only set 'height' to 100 when 'height' does not exist in myCat.  strings  string in python can be enclosed by single quote or double quote. Escape characters: \\', \\\u0026quot;, \\t, \\n, \\\\. raw string: A string start with \u0026lsquo;r\u0026rsquo; do not treate backslash as escape character. multiple-line string: treates all white character as part of a string. string are immutable list of characters. Indexes, slices and in and not in operators all work with strings.  r\u0026quot;This is a \\cat\u0026quot; # raw string \u0026quot;\u0026quot;\u0026quot;multi-line string\u0026quot;\u0026quot;\u0026quot; # multi-line string   string methods  Note that strings are immutable, so all string methods return a new string instead mutate the existing string. str.upper(), str.lower() returns the upper / lower case. str.isupper(), str.islower() returns the whether a string is all upper / lower case. Note that in order to be evalauted to true, there must be at least one lower/upper case character. isalpha() - contains letters only; isalnum() - contains letters and number only; isspace() - contains whitespace only; istitle() contains titlespace only. str.startswith(str2) and str.endswith(str2) returns true of \u0026lsquo;str\u0026rsquo; starts / ends with \u0026lsquo;str2\u0026rsquo;. str.join(list) combine \u0026lsquo;list\u0026rsquo; of string together with \u0026lsquo;str\u0026rsquo; between each two adjacent ones. split() function takes a function and returns a list. str.split(str2) split \u0026lsquo;str\u0026rsquo; on each occurance of str2. str.rjust(int,char) or str.ljust(int,char) adjusts str with padding or ending char to make the length to be int str.center(int,char) is similar to rjust but str appers on middle. str.strip() strip the padding and ending white character. str.replace(str1,str2) replace every occurance of \u0026lsquo;str1\u0026rsquo; in \u0026lsquo;str\u0026rsquo; with \u0026lsquo;str2\u0026rsquo;.   string formating  'Hello, %s, you are invited to a party at %s.' % (name,place)  Build-in functions  To use a function in a given module, we need to import that moudle, python code as import random (for example). To call a function in that moudle, the python syntax is random.randint(1,10). We can use use from random import *, it means import every function in a random moudle; and we do not need random. to use a function.  'hello' + 'world' # string concantanation =\u0026gt; 'hello world' 'hello' * 3 # string * integer =\u0026gt; \u0026quot;hellohellohello\u0026quot; len(str) # length of a string int('123') # convert a string to int =\u0026gt; 123 str(123) # convert a int to a string =\u0026gt; '123' bool(exp) # return expression/variable is Ture/False import random random.randint(a,b) # a random integer from a to b import sys sys.exit() # Exit the current program.  third-party modules  To use third-party modules, we need install (via pip) first, and do exactly same as buildin functions.  use pip3 install module-name to install a module use pip3 freeze to view installed modules.   pyperclip moudle  has function copy() and paste() reading and writing text to the clipboard.    import pyperclip pyperclip.copy(\u0026quot;Hello world\u0026quot;) # copy hello world to clipboard pyperclip.paste() # paste what in clipboard   pprint moudle  pprint(obj), when obj is a list or a dictionary, it will prints it in a nice way.    import pprint dic = {100:'hello',110:'world'} pprint.pptint(dic) # prints dic str1 = pprint.pformat(dic) # returns a string of what `pprint` usually prints.  Run a python program  shabang line: at the beginning of a python script, tell the OS to run the script using python.  \u0026lsquo;#! /usr/bin/env python3\u0026rsquo; in MacOS.   Use bash script to run python  #!/usr/bin/env bash python3 path bash  ","date":1593734400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593734400,"objectID":"74efe776f8077466342b237811da6c82","permalink":"/post/python/python1/","publishdate":"2020-07-03T00:00:00Z","relpermalink":"/post/python/python1/","section":"post","summary":"This is just a review of python, Not contain every details.  Expressions  / in python is not an integer dividion (E.g. 25/4 = 6.25). Mutiple an integeri with a string with result a string repeating i times.","tags":null,"title":"Python01 Review","type":"post"},{"authors":null,"categories":null,"content":"5.1 Simple Statement  Expression Statement: when add a semicolon after a expression. A Expression Statement usually have side effects, otherwise, it is useless. Null statement is a single semicolon. A null statement is useful when the language requires a statement but the program\u0026rsquo;s logic does not. Compound Statement: usually refer to as blocl ( \u0026ldquo;{ }\u0026rdquo; ). A block is a scope.  5.2 Statement scope  Variables define inside while, if, switch and for statement are only valid inside the statement.  5.3 Conditional Statements  C++ provides two conditional statements. The if statement and the switch statement. if statement  if (condition) statement else statement2  * Condition must be enclosed in parentheses. Condition can be an expression or an initialized variable declaration. Statements can be replaced by blocks. * `Dangling else`: each `else` is matched with the closest preceding unmatched `if`. We can also make `else` part of outer `if` by enclosing the inner `if` in a block.   Switch statement provides a convernient way to selecting among a number of fixed alternative.  char cn; switch (cn) { case 'a': ++acnt; break; case 'e': ++ecnt; break; }  * A `switch` statement executes by evaluating the parenthesized expression that follows the keyword `switch`. The expression is converted to `integral type`, the result of expression is compared with the value associated with each `case`. * If the expression matched the value of a `case` label (\u0026quot;case 'a'\u0026quot;), execuation begins with the first statement following that label. * After a `case` label is matched, execuation continues across all the remaining `case`s. * A `case` label must be a `constant integral` expression. * Each `case` label can only contain one value (`case 1,2,3:` is an error). * Don't forget `break` after a case label.  switch(ch) { case 'a': ++acnt; case 'e': ++ecnt; case 'i': ++icnt; } // In this case, when ch is matched with 'a', then all acnt, ecnt and icnt increments. switch(ch) { case 'a': case 'e': case 'i': ++vowelcnt; } // Any case of 'a', 'e' and 'i' will increment vowelcnt.  * `default` label: The statements following the `default` label are execuated when no `case` label matches the value of the `switch` expression. * Execuation in a `switch` can jump across `case` labels. If such jump bypasses initialization of variable (both implict and explict initializations), then the complier will error. (One remedy is add curly braces to narrow the scope of initialization.)  5.4 Iterative Statement  while and for statement test the condition before execuating the body. The do while executes the body and then tests its condition.  while statement while (condition) statement   Variables defined in while condition or while body are created and destory on each iteration.  for statement  traditional for statement  for (initializer; condition; expression) { statement }  * `initializer` must be a declaration statement, an expression statement or a null statement. * 1. `initializer` will be execuated only once. 2. If condition eveluates as `true`, then the for boby execuates; otherwise, the loop terminates. 3.After `for` body execuates, `expression` execuates. * `inti-statement` can defined several objects, but they must be separated by `comma`, so they must have same base type. * `omiting parts of the for header`: A `for` loop can omit any (or all) of `init-statement`, `condition`, or `expression`, but we cannot omit semicolon. Note that, omiting `condition` is equilavent to writing `true` as condition.   Range for statement  for (declaration : expression) statement //What a range for really does for (auto beg = v.begin(), end = v.end(); beg != end; ++beg) { //statements }  * `expression` must represent a sequence. `declaration` defines a variable. * We usually use keyword `auto` as type in declaration. * If we want to mutate elements, we should use reference type.   do while statement  do statement while (condition); // A do while ends with a semicolon.  * Since `do while` execuate statement before condition, then it is not allowed to declare variable in a do condition. * If we add curly braces in `do` statement, then variables defined in `do` statement are not accessible in `condition` (scope problem).  5.5 Jump Statement  Jump statement interrupt the flow of execution. C++ offers four jumps: break, continue, goto and return. The break statement terminates the nearest enclosing while, do while, for or switch statement. A continue statement terminates the current iteration of the nearest enclosing loop.  A continue statement can appear only inside a for, while or do while, and swith if it is embedded inside an iterative statement. After continue, execution continues by evaluating the condition in while and do while; and by evaluating the expression in for loop.   A goto statement provides an unconditional jump from the goto to a another statement in the same function.  As switch statement, jump bypasses an initialization is illegal    goto label; end: return // labeled statementl may be the target of a goto goto end; int ix = 10; end: ix = 42; //error, bypasses an initialization  5.6 try Blcoks and Exception Handling  Exceptions are used to handle run-time errors. Exception handling is generally used when one part of a program detects a problem that it cannot resolve. throw  A detecting part (where problem arises) of a program uses a throw expression to raise an exception. A throw consists of the keyword throw followed by an expression (an object, runtime_error is defined in stdexcept header.) Throwing an exception terminates the current function and tranfers control to a handler.    if (item1.isbn() != item2.isbn()) { throw runtime_error(\u0026quot;Data must refer to same ISBN\u0026quot;); }   try block The general form of a try block is  try { program_statements } catch (exception_declaration) { handler-statements } catch (exception_declaration) { handler-statements } //here  * A `catch` consist of three parts: the keyword `catch`, the declaration of an object within parentheses (`exception declaration`), and a block of `exception` handler. * After a catch block execuating, the control flow will falls through the closing brace of `try` (__here__ in above code). * Objects in `stdexcept` header have member function `.what()`, it prints the error messege of a exception. * E.g. A() calls B(), B() call C(). C throw an exception, it will search a catch hendler in B, but if search fails, function B will terminates, and search catch hendler in A. Ans so on.   Variables defined in try block is inaccessible in other blocks \u0026ndash; in particularm they are not accessible to the catch clause.\n  Standard Exceptions  The exception defines a general kink of exception class named exception. It communicates only that an exception occured but no additional info. We can create, copy and assign any type of exceptions to exception type (e.g. runtime_error is a derived class of exception) The stdexcept header defines several general purpose exception classes. The new header defines the bad_alloc exception type. The type_info defines bad_cast exception type. We can default initialize exception, bad_alloc and bad_cast objects (but we cannot initialize them). Other exceptions don\u0026rsquo;t suppot default initialize, we can only initialize them (opposite way).     ","date":1593216000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593216000,"objectID":"57ef87e931596b77c358c53869d019e7","permalink":"/post/c++_primer_chap5/","publishdate":"2020-06-27T00:00:00Z","relpermalink":"/post/c++_primer_chap5/","section":"post","summary":"5.1 Simple Statement  Expression Statement: when add a semicolon after a expression. A Expression Statement usually have side effects, otherwise, it is useless. Null statement is a single semicolon. A null statement is useful when the language requires a statement but the program\u0026rsquo;s logic does not.","tags":null,"title":"C++ Primer Chap 5 Statements","type":"post"},{"authors":null,"categories":null,"content":" A expression is composed of one or more oprands and yields a result.  Fundamentals  There are unary operators (such us \u0026amp; and *) and binary operators (such as == and +). lvalue could stand on the left-hand side of an assignment while rvalue not.  Operators differ as to whether they require a lvalue ot rvalue, we can use lvalue when ask for rvalue, but not other direction.   decltype differs between rvalue and lvalue, when we apple decltype on an expression, the result is a reference if the expression returns a rvalue (e.g. p is int *, decltype(*p) will return int \u0026amp; )   Order of evaluation  int i = f1() + f2(), we donn\u0026rsquo;t know f1() will be called first or f2() will be called first. Operators does not specify the order. There are few exceptions: AND (\u0026amp;\u0026amp;) (left-hand oprand is evaluated first), OR(||),conditional (? :),comma (,). Order of evaluation is independent of precedence and associativity.    Arithmetic Operators  The oprands and results of Arithmetic operators are rvalues. Arithmrtic operators can be applied to any of the arithmetic type and any type that can be converted to arithmetic . The % returns the remainder of two integer value. Note that the operands to % must have integer type. In C++11, when m,n \u0026gt; 0,  (-m / n) and (m / -n) are always equal to (-(m/n)), m%-n is equal to m%n; (-m) % n is equal to -(m%n).    Logic and Rational Operators  The oprands to these operators are rvalues and the result is an rvalue.  The logic AND and OR operators always evaluate their left operand first, and evaluate their right operand if the left operand cannot determine the results. The relational operators return a bool type, so nested relational operators may yield a surprising result (e.g. i \u0026lt; j \u0026lt; k).   true will be converted to 1 as int, and false will be converted to 0 as int.\nIn practice, it is better to use const reference instead of copying.\n  If we want to test the truth value, the most direct way will be if (val) or if (! val). If we are using if (val == true), some problem will raise if val is not a boolean type. In this case, true will be converted to the type val has, and leads to a surprising result.  Assignment operators  The left-hand operand of an assignment operator must be a modifiable lvalue. Assignment is right associative. ival = jval = 0 will evaluate jval = 0 first and return jval. (assignment will return its left-hand operand) Assignment has low precedence than the rational operatos, parentheses are usually needed around assignment. Compound Assignment operator include +=, -=, *=, /=, %= and \u0026lt;\u0026lt;=, \u0026gt;\u0026gt;=, \u0026amp;=, ^=, |= (bitwise operators.)  Increment and Decrement operator  The ++ and -- operators are useful for iterators, since many iteratos do not support arithmetic. ++i will add 1 to i fist, then return the updated i. i++ will add 1 to i, and return unchanged i These operatos require lvalue, the prefix one return the object itself as lvalue; the postfix one return a copy of the object\u0026rsquo;s original value as rvalue. E.g. pbed is an iterator type. *pbed++ print the current value and advance pbeg. It is equivalent to *(pbeg++), and is commnly used in C++. Since order of oprand to be evaluated is undefined, to write expression involved ++ and --, should ask first what will happen if left-hand operand is evaluated first and what will happen if right-hand operand is evaluated first.   Use postfix operatos only when necessary.\n The member Access operator  The dot. and arraow -\u0026gt; provide for member access. Remember ptr-\u0026gt;mem = (*ptr).mem. Derederence has lower precedence than dot.  The Conditional Operator string finalgrade = (grade \u0026lt; 60) ? \u0026quot;fail\u0026quot; : \u0026quot;pass\u0026quot;   The conditional operator has the form cond ? expr1 : expr2. expr1 and expr2 must have the same type (or can be converted to same type). If cond is true, it will return expr1, and expr2 otherwise. The result of conditional operator is lvalue if both expr1 and expr2 returns lvalue. The contional operator has fairly low precedence, so when use it in an output expression, a parenthesis should be added. Nested Condotonal Operator: right associative.  The Bitwise Operator   The bitwise operators take operands of integral type that they use as a collection of bits.\n  There is no guarantees for how the sign bit is handled, it is better to use unsigned types for bitwise operations.   \u0026gt;\u0026gt; and \u0026lt;\u0026lt; operators: Bits are shifted off left or right, padding 0\u0026rsquo;s when necessary (bits \u0026lt;\u0026lt; 8 shifts bits to the left by 8 positions)\n  ~bit generates a new value with the bits of its oprand inverted.\n  \u0026amp;,|,^ are bitwise and, or and xor operator, they compare two integer value bits by bits. ^ is 1 either but not both oprands contain 1.\n  Shift operatos are left associative, and it has precedence lowr than arithmetic operatos but higher than relation operators.\n  cout \u0026lt;\u0026lt; 10 \u0026lt; 42; //error cout \u0026lt;\u0026lt; 10 evaluates first.  The sizeof Operator  The sizeof operator returns the size, in bytes, of an expression or a type name.  usage: sizeof expr and sizeof (type). sizeof an array is the size of entire array. sizeof a string or a vector returns only the size of the fixed part.    Sales_data data, *p; sizeof (p); // size of a pointer sizeof (*p); // size of which p points. sizeof (data.revenue) sizeof (Sales_data::revenue); //could use scope operator to fetch the members. sizeof (ia) / sizeof (*ia) // returns the number of elements is ia, note ia is a array.  Comma Operator  The comma operator takes two operands, which it evaluates from left to right. It guarantees the order. The left-hand expression is evaluated and its value is discarded, the result of a comma expression is the value of right-hand expression.  Type conversion   Two types are related if there is a conversion between them.\n  Implict conversion: automatic conversion without programmer intervention.\n In most expression, values of integral types smaller than int are first promoted to an appropriate larger integral type. In conditions, nonbool are converted to bool In initialization, the inirializer is converted to the type of the variable. In assignment, the right-hand operand is converted to the type of left-hand. Conversion also happen during function calls.    Arithmetic conversion\n operands to an operator are converted to the widest type integral value in converted to an appropriate floating-point type. Integral promotion: small integral types (bool,char,signed char,short\u0026hellip;) are promoted to int. Operands of unsigned type  when add an ussigned int with a int, int will be converted to unsigned int first (when unsigned operand has a larger type than the signed operand; in other direction, the behaviour is undefined.)      Other conversions\n array is automatically converted to a pointer except address-of(\u0026amp;),sizeof,typeid,decltype. 0 and nullptr can be converted to any pointer type. A pointer to any nonconst type can be converted to void *. A pointer to any type can be converted to const void* If T is a type, we can convert a pointer or a reference to T into a pointer or a reference to const T. Conversions defined by class type. For example. the IO library defines a conversion from istream to bool.    Explicit conversions\n cast-name\u0026lt;type\u0026gt; (expression): type is the target type; if expression is a reference, then the result is an lvalue.   static_cast: Any well-defined type conversion, other than those involving low-level const.    const_cast: changes only low-level const, \u0026ldquo;cast away the const\u0026rdquo;    reinterpret_cast performs a low-level reinterpretation of the bit pattern.      // static_cast double d = 3.14; void *p = \u0026amp;d; double *dp = static_cast\u0026lt;double *\u0026gt; (p); //fine. // const_cast const char a = 'a'; const char *pc = \u0026amp;a; chat *p = const_cast\u0026lt;char *\u0026gt;(pc) // cast_away const, but writing through p is undefined since the object originally is a const. char a = 'a'; const char *pc = \u0026amp;a; chat *p = const_cast\u0026lt;char *\u0026gt;(pc) //cast_away const, can write through p. //reinterpret_cast int *ip; char *pc = reinterpret_cast\u0026lt;char*\u0026gt; (ip)  ","date":1593043200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593043200,"objectID":"b763d251f877e75455fb9c1b5db40585","permalink":"/post/c++_primer_chap4/","publishdate":"2020-06-25T00:00:00Z","relpermalink":"/post/c++_primer_chap4/","section":"post","summary":"A expression is composed of one or more oprands and yields a result.  Fundamentals  There are unary operators (such us \u0026amp; and *) and binary operators (such as == and +).","tags":null,"title":"C++ Primer Chap 4 Expression","type":"post"},{"authors":null,"categories":null,"content":"Namespace using declarations  scope operator ::: look in the scope of left-hand oprand for the name of the right-hand oprand. A using declaration let us use a name from a namespace without adding namespace:: as prefix.  Library string type # include \u0026lt;string\u0026gt; using std::string;  Defining and initializing string  When we initialize a variable using =, we are using copy initialization; when we initialize a variable omit =, we are using direct initialization  Operations on strings  Reading and writing strings  when reading strings, the os will read and discards any leading whitespace; it then reads characters until next whitespace character is encounted. (e.g when we input \u0026ldquo;hello world\u0026rdquo;, the os will only read in \u0026ldquo;hello\u0026rdquo;) getline(is,s) will read a whole line until firstly encounter the newline character (not include newline), then store the content to a string(line). getline(...) will return its istream.   s.empty() will return a bool based on whether s is empty. s.size() will return the length of s  s.size() will return a string::size_type value. string::size_type is an unsigned integer type big enouth to hold the size of any string. (could use decltype to get its type). Since it is an unsigned integer type, be caution when add,substract or compare it with a signed integer type.   == and != compares whether two strings are equal, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;= compare two string using dictionary strategy (case sensitive) + and += adding two string by concatenating of the left-hand followed by the right-hand oprand.  when we add a string and a literals, one of left-hand and right-hand must be a string(\u0026quot;hellow\u0026quot; + \u0026quot;world\u0026quot; + s1 is illegal) string literals are not strings !    Dealing with Characters in string  Dealing with single character and want to check the characteristic of a single character. using functions in #include\u0026lt;cctype\u0026gt; header.  Use Range-based for to process every character  string s(\u0026quot;hello world\u0026quot;); for (auto c : s) { //access every character in s // do something } for (auto \u0026amp;c : s) { //use reference if we want to mutate the value of each character. // do something }   Process only some character  using [] operatpr. Subscript operator will take a string::size_type, and it starts at 0 which end at s.size() - 1. [] operatpr returns a value typed char \u0026amp;.     when we use subscript operator, it is best practice to use an string::size_type (by using decltype(s.size()) i = 0) variable, and check its value is less than s.size().\n Library vector type  vector is a collection of objects, all of which have the same type.  #include \u0026lt;vector\u0026gt; using std:vector; vector\u0026lt;vector\u0026lt;string\u0026gt; \u0026gt; file;   vector is a class template, it is not a class, but tell the complier how to generate a class. The process of generating a class is called instantiation. To instantiate a vector, we must tell the complier what of objects a vector will store.  Define and initializing vector  Sevel ways to initialize  copy initialization (using = ) List initialization: supply a list of element values enclosed by curly braces. (c++11 feature, could be either direct or copy initialization) Number of Elements: supply a count and an element value. If we donnot specify the value, the complier will use value initialization, which calls the implicit initialization. (only can use direct initialization) Initialize using another array or vector    vector\u0026lt;int\u0026gt; i1{10,3,4} //List initialization, direct. vector\u0026lt;int\u0026gt; i2 = {10,3,4} //List initialization, copy. vector\u0026lt;int\u0026gt; v1{10,1}; //v1 will contain 2 elements vector\u0026lt;int\u0026gt; v2(10,1); //v2 will contain 10 copies of 1 vector\u0026lt;string\u0026gt; v3{\u0026quot;hi\u0026quot;} // v3 will contain one element \u0026quot;hi\u0026quot; vector\u0026lt;string\u0026gt; v4(\u0026quot;hi\u0026quot;) // error vector\u0026lt;string\u0026gt; v5{10,\u0026quot;hi\u0026quot;} //since list initialization is not valied -- 10 is not a string -- then the complier will treate this as vector\u0026lt;string\u0026gt; v5(10,\u0026quot;hi\u0026quot;) vector\u0026lt;int\u0026gt; i3(i1.begin(), i1.end()); int arr1[] = {1,2,3}; vector\u0026lt;int\u0026gt; i4(begin(arr1), end(arr2));  Adding elements to a vector  using v.puch_back(element) to add element into a vector. vectors grow efficiently, so it is better to define vector as indifinit size.   The body of a range for must not change the size of the sequence over which it is iteration.\n vector operation  Most of operations of vector are similar to operations of string  v.size() function return a value of vector\u0026lt;T\u0026gt;::size_type type. To compare two vectors, we must make sure that the underlying element type can be compared. subscript operator [] is similar it is in a string. Note that it fetches an existing element, it does not add an element.    Introducing Iterators  Iterator \u0026ndash; like pointers \u0026ndash; gives us indirect access to an element or a character A valid iterator either denotes as element or denotes a position one past last element in a container.  Using iterator  The begin member returns an iterator that denotes the first element; the end member denotes the \u0026lsquo;one past the end\u0026rsquo; In general, we don\u0026rsquo;t know the precise type of an iterator, so it is better to use auto type. If the container v is empty, then v.begin() == v.end()  ++ operator means move from one element to the next. * operator is just like what we did in a pointer.   iteratos can be const or nonconst.  if the object is const, then begin and end will return constant iterator. if the object is nonconst, then cbegin and cend will return constant iterator.   If we have a vector\u0026lt;string\u0026gt; and it is a iterator, then we want to see whether the element of it is empty, we can de (*it).empty() or using arrow operator it-\u0026gt;empty(). Where it-\u0026gt;mem is a synonym for (*it).mem  Iterator Arthmetic  Iterators for string and vector support additional operations.  We can add an integer value and an iterator. Doing so returns an iterator positioned forward that many element. We can compare two iterators, but they should both belongs to smae vectror or a string We can substract two iterators, the result is the amount by which we\u0026rsquo;d have to change one iterator to get the another. The result is a signed integer type named difference_type.  // Example: Binary search auto begin = text.begin(), end = text.end(); auto mid = text.begin() + (end - begin) / 2; while (mid != end \u0026amp;\u0026amp; *mid != sought) { if (sought \u0026lt; *mid) end = mid; else beg = mid + 1; mid = beg + (end - begin) / 2; }  Arrays  Array is a C-stype container. It is similar to vector, but have to pre-determine its size  Defining and Initializing arrays  Defining array: a[b] where a is the name and b is the size; b should be a constexpr.   As with variable of build-in type (int, unsigned), a default-initialized array of built-in type that is defined inside a function will have undefined value.\n  could use list initialize. if use list initialize, then b should be greater than or equal to the number of elements. If b is greater than the number of elements, then the remaining spots will be used value initializition ( 0 for int and \u0026quot;\u0026rdquo; for strings) Character arrays could be initialized by a string literal. Be careful that string literal ends with a null character. No copy or assignment operator for array (!)  string a1[3] = {\u0026quot;hi\u0026quot;,\u0026quot;bye\u0026quot;} // {\u0026quot;hi\u0026quot;,\u0026quot;bye\u0026quot;,\u0026quot;\u0026quot;} int a3[5] = {0,1,2} //a3[] = {0,1,2,0,0} int a2[] = {0,1,2} //ok. char a4[] = \u0026quot;c++\u0026quot;; // fine, null character in the end. char a4[3] = \u0026quot;c++\u0026quot; //error, no space for null character. int a6[] = a2 // error, no copy or assignment.   Complicated Array declarations  reading types of complicated array declaration should from inside to outside.    int (*Parray)[10] = \u0026amp;arr // inside parentheses, we know Parray is a pointer. it is a pointer to an int array of size of 10. int *(\u0026amp;arry)[10] = ptrs. // inside parentheses, we know arry is a reference. It is a reference to an int pointer array of size of 10.  Accessing the elements of an array.  When we use a variable to subscript an array, we normally should define that variable to have type size_t. size_t is an unsigned interger big enough to hold the size of any object in memory. Operations using subscripy on array is similar those in vectors, be careful with buff overflow bugs.  Pointer and Arrays  The complier automatically substitutes a pointer to the first element  string nums[] = {\u0026quot;one\u0026quot;,\u0026quot;two\u0026quot;,\u0026quot;three\u0026quot;}; string *p = nums;   Pointers that address elements in an array is treated as interators. the begin iterator is the first element, the end iterator is the address of nonexistent element one past the last element.  int arr[] = {1,2,3,4,5}; int *p = arr; ++p; //p now pointer tp arr[1] int *e = \u0026amp;arr[6]; // pointer just past the last element in arr. auto size = p - e; //the array size.   c++11: begin(arr) and end(arr) equal to p and e respectively. These functions are defined in the iterator header. Pointer Arithmetic: same as iterator in vector.  //what the complier does when subscript int arr[5] = {1,2,3,4,5}; int i = arr[2]; // Complier treate it as i = *(arr + 2);   Unlike subscript for vector and string, the index of the build-in subscript operator is not an unsigned type.\n // The following code is not valid for vector and string int *p = \u0026amp;arr[2]; int j = p[1]; // the third element in arr.  C-style strings Multidimentianal arrays  Multidimentianal arrays are just nested arrays  Initialization int ia[3][4] = {0}; //array of size 4; each element is an array of size 4; all elements are 0 int ia2[3][4] = { {0,1,2,3}, {4,5,6,7}, {8,9,10,11} }; int ia3[3][4] = { { 0 }, { 4 }, { 8} }; //explictly initialize only element 0 in each row.   Pointers  a pointer to a 2-dimention array is the address of its first inner array. int *ip[4] and int (*ip)[4] are different, the first is an array of pointers, the second is a pointer a an array. when we use range for to traverse an multi-array, the control variable for outer loop should be as reference. If we don\u0026rsquo;t, the complier will automatically convert it to a pointer.    // using for loop for 2-dimentional array int ia[3][4] for (auto p = ia; p != ia + 3; p++) { for (auto q = *p; q != *p + 4; q++) { cout \u0026lt;\u0026lt; *q \u0026lt;\u0026lt; ' '; } } for (auto \u0026amp;p : ia) { for (int j : p) { cout \u0026lt;\u0026lt; l \u0026lt;\u0026lt; \u0026quot; \u0026quot;; } } // using range for  ","date":1592611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592611200,"objectID":"b1fafdd6e3b675902e7610254d1c4f1a","permalink":"/post/c++_primer_chap3/","publishdate":"2020-06-20T00:00:00Z","relpermalink":"/post/c++_primer_chap3/","section":"post","summary":"Namespace using declarations  scope operator ::: look in the scope of left-hand oprand for the name of the right-hand oprand. A using declaration let us use a name from a namespace without adding namespace:: as prefix.","tags":null,"title":"C++ Primer Chap 3 Strings, Vectors, and Arrays","type":"post"},{"authors":null,"categories":null,"content":"Dependency  Dependency in C++ occurs as following  executable depends on .o files. (linking) .o files depends on .c files. (compling) .c files depends on .h files. (including)   Cycles in #include are broken through #ifndef checks  When changes are made to x.h and x.c, we do not need to recomplie every single .c file. Only recompile x.c and linking x.o,y.o and z.o will be sufficient.  Make  make is a system command taking a dependency graph and uses file-changing time to trigger rules that bring the dependecy up-to-date.   make does not understand relationship among sources.\n  Make file can have any names, but make command will implicit look for makefile or Makefile Basic syntax of makefile (bash)  variable = value # variable target: dependency1 dependency1 ... command1 command2 ...   command must be indented by one tab character\n  The above example have the following dependecy tree x.o file is a product of x.c, and is dependent on x.h,y.h and z.h.  make file for the above example will look like  CXX = g++\t#complier CXXFLAGS = -g -Wall -c #comploer flags OBJECTS = x.o y.o z.o # object files forming executable EXEC = a.out. # executable name ${EXEC}:${OBJECT} #link step ${CXX} ${OBJECTS} -o ${EXEC} x.o:x.c x.h y.h z.h ${CXX} ${CXXFLAGS} x.c y.o:y.c y.h z.h ${CXX} ${CXXFLAGS} y.c z.o:z.c z.h y.h ${CXX} ${CXXFLAGS} z.c   ${CXX} ${CXXFLAGS} x.c is dedundent since makefile could deduces this by the dependency structure x.o:x.c x.h y.h z.h cleaner make file show as below  CXX = g++\t#complier CXXFLAGS = -g -Wall -c #comploer flags OBJECTS = x.o y.o z.o # object files forming executable EXEC = a.out. # executable name ${EXEC}:${OBJECT} #link step ${CXX} ${OBJECTS} -o ${EXEC} x.o:x.c x.h y.h z.h # target/dependecy/commands y.o:y.c y.h z.h z.o:z.c z.h y.h  Automate target and dependencies CXX = g++ # compiler CXXFLAGS = -g -Wall -MMD # compiler flags, remove -c OBJECTS = x.o y.o z.o # object files forming executable # executable name DEPENDS = ${OBJECTS:.o=.d} # object files forming executable # substitute “.o” with “.d” EXEC = a.out # executable name ${EXEC} : ${OBJECTS} # link step ${CXX} ${OBJECTS} -o ${EXEC} -include ${DEPENDS} # copies files x.d, y.d, z.d (if exists) .PHONY: clean # not a file name clean: # remove files that can be regenerated rm -rf ${DEPENDS} ${OBJECTS} ${EXEC} # alternative *.d *.o   Prepocessor traverses all include file, so it knows all source-file dependency g++ flag -NMD writes out a dependency graph for source-file to file source-file.d     file contents     x.d x.o: x.c x.h y.h z.h   y.d y.o: y.C y.h z.h   z.d z.o: z.C z.h y.h     -include reads the .d files containing dependecies. .PHONY: Without .PHONY, make clean command works fine if there is no file named \u0026lsquo;clean\u0026rsquo;; however, there will be a problem when a file named clean exists. Once we defined .PHONY clean, make clean will run the recipe regardless of whether there is a file named clean   We build a universal makefile for all projects.\n ","date":1592438400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592438400,"objectID":"bf3475b4b7a1bc6d4135307d3c436fec","permalink":"/post/c++_compiling_complex_program/","publishdate":"2020-06-18T00:00:00Z","relpermalink":"/post/c++_compiling_complex_program/","section":"post","summary":"Dependency  Dependency in C++ occurs as following  executable depends on .o files. (linking) .o files depends on .c files. (compling) .c files depends on .h files. (including)   Cycles in #include are broken through #ifndef checks  When changes are made to x.","tags":null,"title":"C++: Compiling Complex Program","type":"post"},{"authors":null,"categories":null,"content":"Writing a simple C++ program  One cpp project can only have one main, the OS excute a cpp program by calling main.  Brife introduction on complier  GNU g++ -std=c++11 -o prog1 prog.cc. -o is an arguement of g++, it tell the complier generate a executable file named prog1. Use -Wall as argument of GNU to enable warnings. Use $ echo $? to view exit code.  IO  IOstream libarary #include \u0026lt;iostream\u0026gt; \u0026lt;\u0026lt; operator will return its left-hand operand std::endl will clean the buffer, in which all outputs will be outputed into screen, instead of waiting in a memory.  int v1 = 0, v2 = 0; std::cout \u0026lt;\u0026lt; \u0026quot;Enter two numbers\u0026quot; \u0026lt;\u0026lt; endl; std::cin \u0026gt;\u0026gt; v1 \u0026gt;\u0026gt; v2;  Reading an unknown number of Inputs while (std::cin \u0026gt;\u0026gt; value)   We could use istream as a condition, it will be true if the stram is valid The stream will be invalid if we encounter EOF (Ctrl + D on Mac)  File redirection addItems \u0026lt; infile \u0026gt; outfile   We have an executable file names addItems, the above bash command reads inputs from infile and write into outfile.  ","date":1592265600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592265600,"objectID":"60da821707a6cf73289b4690ef6cd2d8","permalink":"/post/c++_primer_chap1/","publishdate":"2020-06-16T00:00:00Z","relpermalink":"/post/c++_primer_chap1/","section":"post","summary":"Writing a simple C++ program  One cpp project can only have one main, the OS excute a cpp program by calling main.  Brife introduction on complier  GNU g++ -std=c++11 -o prog1 prog.","tags":null,"title":"C++ Primer Chap 1 Getting Started","type":"post"}]